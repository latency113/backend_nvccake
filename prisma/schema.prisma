// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/providers/database/generated"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  OFFICER
  USER
}

enum GradeLevelType {
  VOCATIONAL // ปวช.
  HIGHER // ปวส.
}

enum RequestStatus {
  pending
  approved
  rejected
}

enum OrderStatus {
  pending
  complete
  cancelled
}

enum TeamType {
  team
  person
}

model Department {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  classroom   Classroom[]
  cakeRequest CakeRequest[]
  teacher     Teacher[]
}

model Classroom {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  teacher_id     String   @db.ObjectId
  department_id  String   @db.ObjectId
  grade_level_id String   @db.ObjectId
  students       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  teacher     Teacher     @relation(fields: [teacher_id], references: [id])
  department  Department  @relation(fields: [department_id], references: [id])
  grade_level GradeLevel? @relation(fields: [grade_level_id], references: [id])

  orders Order[]

  @@unique([name, department_id, grade_level_id])
  @@index([department_id], name: "idx_classroom_department_id")
}

model GradeLevel {
  id    String         @id @default(auto()) @map("_id") @db.ObjectId
  level GradeLevelType
  year  Int

  classroom Classroom[]

  @@unique([level, year])
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  username  String  @unique
  password  String
  email     String?
  role      Role    @default(USER)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cakeRequest CakeRequest[]
  tokens      Token[]
}

model Team {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  classroom_ids       String[] @db.ObjectId
  student_member_name String[]  @map("studentMemberName")
  total_sales_pounds  Float?   @map("totalSalesPounds")
  total_sales_baht    Float?   @map("totalSalesBaht")
  team_type           TeamType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Product {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  customerName String
  classroom_id String?     @db.ObjectId
  team_id      String?     @db.ObjectId
  orderDate    DateTime
  totalPrice   Float
  book_number  Int
  number       Int
  phone        String
  pickup_date  DateTime
  deposit      Int
  advisor      String
  status       OrderStatus @default(pending)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  order_items  OrderItem[]

  team      Team?      @relation(fields: [team_id], references: [id])
  classroom Classroom? @relation(fields: [classroom_id], references: [id])

  @@unique([book_number, number])
  @@index([classroom_id], name: "idx_order_classroom_id")
  @@index([team_id], name: "idx_order_team_id")
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  order_id   String   @db.ObjectId
  product_id String   @db.ObjectId
  pound      Int
  quantity   Int
  unitPrice  Float
  subtotal   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order              Order              @relation(fields: [order_id], references: [id])
  product            Product            @relation(fields: [product_id], references: [id])
  cake_request_items CakeRequestItems[]
}

model CakeRequest {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  requestDate   DateTime
  status        RequestStatus @default(pending)
  note          String?
  user_id       String        @db.ObjectId
  department_id String        @db.ObjectId
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  department Department         @relation(fields: [department_id], references: [id])
  user       User               @relation(fields: [user_id], references: [id])
  items      CakeRequestItems[]

  @@map("cake_requests")
}

model CakeRequestItems {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  request_id    String @db.ObjectId
  order_item_id String @db.ObjectId

  request    CakeRequest @relation(fields: [request_id], references: [id])
  order_item OrderItem   @relation(fields: [order_item_id], references: [id])

  @@map("cake_request_items")
}

model Teacher {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String      @unique
  department_id String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  classroom     Classroom[]
  department    Department  @relation(fields: [department_id], references: [id])
}

model Token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  user_id    String   @db.ObjectId
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id], name: "idx_token_user_id")
  @@map("tokens")
}
